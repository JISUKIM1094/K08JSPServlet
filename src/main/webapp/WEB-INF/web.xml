<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://xmlns.jcp.org/xml/ns/javaee" xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd" id="WebApp_ID" version="4.0">
  <display-name>K08JSPServlet</display-name>
  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.jsp</welcome-file>
    <welcome-file>HelloJSP.jsp</welcome-file>
    <!-- 웰컴 파일 리스트 안에 jsp 파일명으로 링크 걸어놓으면 메인 페이지 처럼 프로젝트 실행시 나타나게 된다. -->
  </welcome-file-list>
  
<!-- 해당 프로젝트 (웹애플리케이션) 전체에서 사용할 수 있는 컨텍스트
	초기화 파라미터(매개변수)로 일종의 상수값 -->
	<context-param>
		<param-name>INIT_PARAM</param-name>
		<param-value>web.xml에 저장한 초기화 매개변수</param-value>
	</context-param>


<!-- 웹애플리케이션에서 예외(에러) 발생시 처리할 페이지 지정
	404: Not found 페이지 찾을 수 없음 (경로에러)
	405: Method not a allowed. get/post 방식으로 전송 시 
		해당 요청을 처리할 메서드가 없을 때 발생
	500: Internal server error 서버 내부 오류로 
		오타/로직 에러로 웹서버가 요청을 처리할 수 없음 

	에러페이지 처리는 실제 서비스 시 반드시 필요한 부분이다.
	
	하지만 개발중에는 에러확인 후 디버깅 하면서 진행해야 하므로
		개발 완료 시 까지는 주석으로 처리해둔다. -->
<!-- <error-page>
		<error-code>404</error-code>
		<location>/02ImplicitObject/Exception.jsp</location>
	</error-page>
	<error-page>
		<error-code>405</error-code>
		<location>/02ImplicitObject/Exception.jsp</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/02ImplicitObject/Exception.jsp</location>
	</error-page>
-->	
 
 

<!--★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆-->
 <!-- 오라클 접속 정보를 컨텍스트 초기화 파라미터로 등록 -->
 <context-param>
		<param-name>OracleDriver</param-name>
		<param-value>oracle.jdbc.OracleDriver</param-value>
	</context-param>
 <context-param>
		<param-name>OracleURL</param-name>
		<param-value>jdbc:oracle:thin:@localhost:1521:xe</param-value>
	</context-param>
 <context-param>
		<param-name>OracleId</param-name>
		<param-value>musthave</param-value>
	</context-param>
 <context-param>
		<param-name>OraclePwd</param-name>
		<param-value>1234</param-value>
	</context-param>
<!--★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆--> 
 
 <!-- 세션 유지시간 설정, web.xml에서는 분단위로 지정된다. -->
 <session-config>
 	<session-timeout>15</session-timeout>
 </session-config>
 
 <!--★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆-->
 <!-- 한글 깨지는 현상 인코딩 : 현재 개발중인 웹어플에 전체 적용
 		웹어플에 들어오는 모든 요청에 대한 문자 인코딩 필터 처리 -->
  <filter>
    <filter-name>SetCharEncoding</filter-name>
    <filter-class>org.apache.catalina.filters.SetCharacterEncodingFilter</filter-class>
      <init-param>
        <param-name>encoding</param-name>
        <param-value>utf-8</param-value>
      </init-param>
  </filter>
  <filter-mapping>
    <filter-name>SetCharEncoding</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
 <!--★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆★☆-->
 
<!-- 게시판 페이징 처리를 위한 파라미터 추가 -->
<!-- 한 페이지에 출력할 게시물의 개수 -->
 <context-param>
	<param-name>POSTS_PER_PAGE</param-name>
	<param-value>10</param-value>
</context-param>
<!-- 한 블럭 당 출력할 페이지의 개수 -->
 <context-param>
	<param-name>PAGES_PER_BLOCK</param-name>
	<param-value>5</param-value>
</context-param>
 
 
 
 <!-- 220603 맵핑설정!
  /13Servlet/HelloServlet.do (컨텍스트 이후 /부터의 경로)가 호출되면
  HelloServlet 으로 인식하고, servlet.HelloServlet 가 실행될 것이다....? (패키지.클래스 - 자바코드..)
  -->
 <servlet> <!-- 서블릿 등록: 서블릿명과 패키지.클래스명 기술 -->
 	<servlet-name>HelloServlet</servlet-name>
 	<servlet-class>servlet.HelloServlet</servlet-class>
 </servlet>
 <servlet-mapping><!-- 서블릿 맵핑: 서블릿과 요청명 기술 -->
 	<servlet-name>HelloServlet</servlet-name>
 	<url-pattern>/13Servlet/HelloServlet.do</url-pattern>
 	<!-- 요청명: 컨텍스트 루트 이후의 경로 기술 -->
 </servlet-mapping>

<!-- 220607 서블릿에서 직접 출력 맵핑
	요청이 있으면 맵핑 된 서블릿명을 통해 등록 된 클래스를 찾아 실행한다.  -->
 <servlet>
 	<servlet-name>DirectServletPrint</servlet-name>
 	<servlet-class>servlet.DirectServletPrint</servlet-class>
 </servlet>
 <servlet-mapping>
 	<servlet-name>DirectServletPrint</servlet-name>
 	<url-pattern>/13Servlet/DirectServletPrint.do</url-pattern>
 </servlet-mapping>

	<!--init-param 해당 서블릿에서만 사용할수있는 상수?변수!!!
			지역변수같아!!!! 
		context-param 얘는 다 쓸수 있어 전역변수 같아!--> 
	
	<!-- MVC패턴으로 회원 인증을 위한 맵핑 설정 -->
	<servlet>
		<servlet-name>MemberAuth</servlet-name>
		<servlet-class>servlet.MemberAuth</servlet-class>
	<!-- 해당 서블릿 내에서만 사용 가능 한 초기화 파라미터 -->
		<init-param> 
			<param-name>admin_id</param-name>
			<param-value>jisu</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>MemberAuth</servlet-name>
		<url-pattern>/13Servlet/MemberAuth.mvc</url-pattern>
	</servlet-mapping>
 
 <!-- 모델2방식의 자료실형 게시판 구현 -->
 <!-- 리스트(목록) 서블릿 맵핑-->
	 <servlet>
	 	<servlet-name>MVCBoardList</servlet-name>
	 	<servlet-class>model2.mvcboard.ListController</servlet-class>
	 </servlet>
	 <servlet-mapping>
	 	<servlet-name>MVCBoardList</servlet-name>
	 	<url-pattern>/mvcboard/list.do</url-pattern>
	 </servlet-mapping>
  
  
  
<!-- 0608 글쓰기 진입 맵핑 -->  
<!-- Mapping
<url-pattern>으로 지정 된 요청명으로 요청이 들어오면
<servlet-name>에 지정 된 서블릿 클래스를 찾아서 해당
<servlet-class>에 요청을 전달한다. 
	└ 패키지.클래스 풀경로 기술
-->
<servlet>
	<servlet-name>MVCBoardWrite</servlet-name>
	<servlet-class>model2.mvcboard.WriteController</servlet-class>
</servlet>
<servlet-mapping>
	<servlet-name>MVCBoardWrite</servlet-name>
	<url-pattern>/mvcboard/write.do</url-pattern>
</servlet-mapping>
<context-param>
	<param-name>maxPostSize</param-name>
	<param-value>1024000</param-value>
</context-param>
  
  
  
  
</web-app>